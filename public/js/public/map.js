// Generated by CoffeeScript 1.9.3

/*
	For /map
		- displays custom google map
	Data Variables
		geofences
		geopoints
 */

(function() {
  var $iconLoading, $info, ID_MAP_CANVAS, ID_STATUS, geopointIcon, initMap, map, mapCircles, mapMarkers, placeMapData, pt_fsu, reloadData, resetInfo, setInfo;

  console.log(geopoints);

  console.log(geofences);

  $iconLoading = $('.icon-loading').toggle(false);

  $info = $('#info');

  resetInfo = function() {
    $info.empty;
    return $info.html('<tr><td colspan="2" class="text-center"><i>Hover over an element to see its description</i></td></tr>');
  };

  setInfo = function(description, color) {
    $info.empty();
    return $info.html('<tr> <td class="col-xs-2" ' + (color != null ? 'style="background-color:' + color + ';"' : void 0) + '></td> <td class="col-xs-10">' + description + '</td> </tr>');
  };

  ID_STATUS = '#status';

  ID_MAP_CANVAS = 'map-canvas';

  geopointIcon = 'img/icons/mapLocation-small.png';

  pt_fsu = new google.maps.LatLng(30.442795, -84.298563);

  map = null;

  mapCircles = [];

  mapMarkers = [];

  placeMapData = function() {
    var c, circle, desc, desc2, gf, gp, i, j, k, l, len, len1, len2, len3, m, marker, n, start, start2;
    i = 0;
    for (j = 0, len = mapCircles.length; j < len; j++) {
      c = mapCircles[j];
      c.setMap(null);
    }
    for (k = 0, len1 = mapMarkers.length; k < len1; k++) {
      m = mapMarkers[k];
      m.setMap(null);
    }
    mapCircles = [];
    mapMarkers = [];
    console.log('---------------------');
    for (l = 0, len2 = geopoints.length; l < len2; l++) {
      gp = geopoints[l];
      console.log('GP=' + JSON.stringify(gp));
      desc2 = '' + gp.description;
      marker = new google.maps.Marker({
        position: new google.maps.LatLng(gp.latitude, gp.longitude),
        map: map,
        icon: geopointIcon
      });
      start = function(d) {
        return google.maps.event.addListener(marker, 'mouseover', function() {
          return setInfo(d);
        });
      };
      start(desc2);
      mapMarkers.push(marker);
    }
    for (n = 0, len3 = geofences.length; n < len3; n++) {
      gf = geofences[n];
      var desc, circle;;
      console.log('GF=' + JSON.stringify(gf));
      desc = '' + gf.description;
      circle = new google.maps.Circle({
        strokeColor: gf.color,
        strokeWeight: 0,
        fillColor: gf.color,
        fillOpacity: 0.35,
        center: new google.maps.LatLng(gf.latitude, gf.longitude),
        radius: gf.radius,
        map: map
      });
      start2 = function(d, c) {
        return google.maps.event.addListener(circle, 'mouseover', function(e) {
          return setInfo(d, c);
        });
      };
      start2(desc, gf.color);
      mapCircles.push(circle);
    }
    $(ID_STATUS + ' .geopoints').text('Active Geopoints: ' + geopoints.length);
    return $(ID_STATUS + ' .geofences').text('Active Geofences: ' + geofences.length);
  };

  initMap = function() {
    var CUSTOM_MAPTYPE_ID, customMapType, featureOpts, mapOptions, styledMapOptions;
    CUSTOM_MAPTYPE_ID = 'custom_style';
    featureOpts = [
      {
        stylers: [
          {
            hue: '#2e2b21'
          }, {
            visibility: 'simplified'
          }, {
            gamma: 0.5
          }, {
            weight: 1
          }, {
            invert_lightness: false
          }
        ]
      }, {
        elementType: 'labels',
        stylers: [
          {
            visibility: 'off'
          }
        ]
      }, {
        featureType: 'water',
        stylers: [
          {
            color: '#9cbebd'
          }
        ]
      }
    ];
    styledMapOptions = {
      name: 'Custom Style'
    };
    customMapType = new google.maps.StyledMapType(featureOpts, styledMapOptions);
    mapOptions = {
      center: pt_fsu,
      zoom: 16,
      disableDefaultUI: true,
      mapTypeControl: true,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DEFAULT,
        mapTypeIds: [CUSTOM_MAPTYPE_ID, google.maps.MapTypeId.HYBRID]
      }
    };
    map = new google.maps.Map(document.getElementById(ID_MAP_CANVAS), mapOptions);
    map.mapTypes.set(CUSTOM_MAPTYPE_ID, customMapType);
    map.setMapTypeId(CUSTOM_MAPTYPE_ID);
    placeMapData();
    return google.maps.event.addListener(map, 'mouseout', function() {
      return resetInfo();
    });
  };

  google.maps.event.addDomListener(window, 'load', initMap);

  reloadData = function() {
    console.log('Reloading...');
    $iconLoading.toggle(true);
    return $.ajax({
      type: 'POST',
      url: '/map/reload',
      data: JSON.stringify({}),
      contentType: 'x-www-form-urlencoded',
      success: function(res) {
        var geofences, geopoints;
        $iconLoading.toggle(false);
        if (res.success) {
          geofences = res.body.geofences;
          geopoints = res.body.geopoints;
          placeMapData();
          return console.log('Reload success!');
        } else {
          console.log('Error loading data: ' + res.body.error);
        }
      },
      error: function() {
        $iconLoading.toggle(false);
        console.log('Error asking for data');
      }
    });
  };

  setInterval(function() {
    return reloadData();
  }, 30000);

}).call(this);
